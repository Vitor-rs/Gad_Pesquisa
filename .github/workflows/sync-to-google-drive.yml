name: Sync Repository to Google Drive as Folder

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sync-to-drive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
        
    - name: Pre-check Environment Variables
      run: |
        python << 'EOF'
        import os
        import sys
        
        print("🔍 Verificando variáveis de ambiente...")
        print("=" * 60)
        
        required_vars = {
            'GOOGLE_CREDENTIALS': '${{ secrets.GOOGLE_CREDENTIALS }}',
            'GOOGLE_DRIVE_FOLDER_ID': '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
        }
        
        repo_vars = {
            'REPOSITORY_NAME': '${{ github.event.repository.name }}',
            'BRANCH': '${{ github.ref_name }}',
            'COMMIT_SHA': '${{ github.sha }}',
            'ACTOR': '${{ github.actor }}'
        }
        
        missing_vars = []
        
        for name, value in required_vars.items():
            if value and value.strip():
                if 'CREDENTIALS' in name:
                    print(f"✅ {name}: {'*' * 8}")
                else:
                    print(f"✅ {name}: {value}")
            else:
                print(f"❌ {name}: NÃO ENCONTRADA")
                missing_vars.append(name)
        
        print("\n📋 Informações do repositório:")
        for name, value in repo_vars.items():
            print(f"ℹ️  {name}: {value}")
        
        if missing_vars:
            print(f"\n❌ ERRO: Variáveis essenciais não encontradas: {', '.join(missing_vars)}")
            print("\nVerifique se você configurou os secrets no GitHub:")
            print("- Vá em Settings → Secrets and variables → Actions")
            print("- Configure GOOGLE_CREDENTIALS e GOOGLE_DRIVE_FOLDER_ID")
            sys.exit(1)
        
        print("\n✅ Todas as variáveis necessárias foram encontradas!")
        print("🚀 Prosseguindo com a sincronização...")
        EOF
        
    - name: Setup Google Credentials
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' | base64 -d > credentials.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV
        
    - name: Validate Google Drive Connection
      run: |
        python << 'EOF'
        import os
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        
        print("🔗 Testando conexão com Google Drive...")
        
        try:
            credentials = service_account.Credentials.from_service_account_file(
                'credentials.json',
                scopes=['https://www.googleapis.com/auth/drive']
            )
            
            service = build('drive', 'v3', credentials=credentials)
            
            folder_id = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
            folder_info = service.files().get(fileId=folder_id).execute()
            
            print(f"✅ Conexão estabelecida com sucesso!")
            print(f"📁 Pasta de destino: {folder_info.get('name')}")
            print(f"🆔 ID da pasta: {folder_id}")
            
            permissions = service.permissions().list(fileId=folder_id).execute()
            print(f"🔐 Permissões configuradas: {len(permissions.get('permissions', []))} entrada(s)")
            
        except Exception as e:
            print(f"❌ Erro ao conectar com Google Drive: {str(e)}")
            print("\n💡 Possíveis causas:")
            print("- Credenciais inválidas ou expiradas")
            print("- Pasta não encontrada ou sem permissão")
            print("- Google Drive API não habilitada")
            raise
        EOF
        
    - name: Sync Repository to Google Drive Folder
      run: |
        python << 'EOF'
        import os
        from datetime import datetime
        from pathlib import Path
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        
        repo_name = '${{ github.event.repository.name }}'
        branch = '${{ github.ref_name }}'
        commit_sha = '${{ github.sha }}'
        parent_folder_id = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
        
        print("🔄 Sincronizando repositório como pasta no Google Drive...")
        print(f"📍 Repositório: {repo_name}")
        print(f"🔀 Branch: {branch}")
        print(f"📝 Commit: {commit_sha[:8]}")
        
        credentials = service_account.Credentials.from_service_account_file(
            'credentials.json',
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        service = build('drive', 'v3', credentials=credentials)
        
        query = f"name = '{repo_name}' and '{parent_folder_id}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
        
        results = service.files().list(
            q=query,
            fields='files(id,name)'
        ).execute()
        
        existing_folders = results.get('files', [])
        
        if existing_folders:
            repo_folder_id = existing_folders[0]['id']
            print(f"📁 Pasta encontrada: {repo_name}")
            print("🧹 Limpando conteúdo existente...")
            
            files_query = f"'{repo_folder_id}' in parents and trashed = false"
            files_to_delete = []
            page_token = None
            
            while True:
                results = service.files().list(
                    q=files_query,
                    fields='nextPageToken, files(id,name)',
                    pageToken=page_token
                ).execute()
                
                files_to_delete.extend(results.get('files', []))
                page_token = results.get('nextPageToken')
                
                if not page_token:
                    break
            
            for file in files_to_delete:
                try:
                    service.files().delete(fileId=file['id']).execute()
                except Exception as e:
                    print(f"  ⚠️  Erro ao remover {file['name']}: {e}")
            
            print(f"  ✅ {len(files_to_delete)} arquivo(s) removido(s)")
            
        else:
            print(f"📁 Criando nova pasta: {repo_name}")
            
            folder_metadata = {
                'name': repo_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [parent_folder_id]
            }
            
            folder = service.files().create(
                body=folder_metadata,
                fields='id'
            ).execute()
            
            repo_folder_id = folder.get('id')
            print(f"✅ Pasta criada com ID: {repo_folder_id}")

        def upload_directory(local_path, parent_id, path_prefix=""):
            uploaded_count = 0
            
            for item in os.listdir(local_path):
                item_path = os.path.join(local_path, item)
                
                if item in ['.git', '__pycache__', 'node_modules', '.github', 'credentials.json']:
                    continue
                
                if item.startswith('.') and item != '.gitignore':
                    continue
                
                if os.path.isfile(item_path):
                    if item_path.endswith(('.pyc', '.pyo', '.pyd', '__pycache__', '.tmp', '.log')):
                        continue
                    
                    try:
                        ext = Path(item_path).suffix.lower()
                        mime_types = {
                            '.txt': 'text/plain',
                            '.py': 'text/x-python',
                            '.md': 'text/markdown',
                            '.json': 'application/json',
                            '.yml': 'text/yaml',
                            '.yaml': 'text/yaml',
                            '.html': 'text/html',
                            '.css': 'text/css',
                            '.js': 'application/javascript'
                        }
                        mime_type = mime_types.get(ext, 'application/octet-stream')
                        
                        file_metadata = {
                            'name': item,
                            'parents': [parent_id]
                        }
                        
                        media = MediaFileUpload(item_path, mimetype=mime_type, resumable=True)
                        
                        file = service.files().create(
                            body=file_metadata,
                            media_body=media,
                            fields='id,name'
                        ).execute()
                        
                        display_path = f"{path_prefix}/{item}" if path_prefix else item
                        print(f"  ✅ {display_path}")
                        uploaded_count += 1
                        
                    except Exception as e:
                        print(f"  ❌ Erro ao enviar {item}: {str(e)[:50]}...")
                
                elif os.path.isdir(item_path):
                    try:
                        folder_metadata = {
                            'name': item,
                            'mimeType': 'application/vnd.google-apps.folder',
                            'parents': [parent_id]
                        }
                        
                        subfolder = service.files().create(
                            body=folder_metadata,
                            fields='id'
                        ).execute()
                        
                        subfolder_id = subfolder.get('id')
                        display_path = f"{path_prefix}/{item}" if path_prefix else item
                        print(f"  📁 {display_path}/")
                        
                        sub_count = upload_directory(item_path, subfolder_id, display_path)
                        uploaded_count += sub_count
                        
                    except Exception as e:
                        print(f"  ❌ Erro ao criar pasta {item}: {str(e)[:50]}...")
            
            return uploaded_count
        
        sync_info = f"""Sincronização automática via GitHub Actions

Repositório: {repo_name}
Branch: {branch}
Commit: {commit_sha}
Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
Autor: ${{ github.actor }}
"""
        
        with open('_SYNC_INFO.txt', 'w', encoding='utf-8') as f:
            f.write(sync_info)
        
        print("\n📤 Fazendo upload dos arquivos...")
        total_uploaded = upload_directory('.', repo_folder_id)
        
        print(f"\n✅ Total de arquivos enviados: {total_uploaded}")
        print(f"\n🎉 Sincronização concluída com sucesso!")
        print(f"📁 Pasta no Drive: {repo_name}")
        print(f"🔗 Localização: Sistema_GAD/Repositorios_Github_Gad/{repo_name}")
        EOF
        
    - name: Final Summary and Cleanup
      run: |
        python << 'EOF'
        import os
        from datetime import datetime
        
        print("\n📋 RESUMO DA SINCRONIZAÇÃO")
        print("=" * 50)
        print(f"✅ Status: Concluída com sucesso")
        print(f"⏰ Horário: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
        print(f"🏢 Repositório: ${{ github.event.repository.name }}")
        print(f"🌿 Branch: ${{ github.ref_name }}")
        print(f"📝 Commit: ${{ github.sha }}")
        print(f"👤 Autor: ${{ github.actor }}")
        print(f"🎯 Destino: Google Drive/Sistema_GAD/Repositorios_Github_Gad")
        print("=" * 50)
        print("🎉 Sincronização automática concluída!")
        
        temp_files = ['credentials.json', '_SYNC_INFO.txt']
        for file in temp_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"🗑️  Removido: {file}")
        EOF
