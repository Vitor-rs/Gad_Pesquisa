name: Sync Repository to Google Drive (Institutional Account)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sync-to-drive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
        
    - name: Create and Run Sync Script
      env:
        CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        cat > sync_drive.py << 'SCRIPT_END'
        import os
        import sys
        import json
        from datetime import datetime
        from google.oauth2.credentials import Credentials
        from google.auth.transport.requests import Request
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload, MediaInMemoryUpload
        from googleapiclient.errors import HttpError
        
        # Configurações do ambiente
        CLIENT_ID = os.environ['CLIENT_ID']
        CLIENT_SECRET = os.environ['CLIENT_SECRET']
        REFRESH_TOKEN = os.environ['REFRESH_TOKEN']
        FOLDER_ID = os.environ['FOLDER_ID']
        
        # Configurações do repositório
        REPO_NAME = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1] or 'Gad_Pesquisa'
        BRANCH = os.environ.get('GITHUB_REF_NAME', 'main')
        COMMIT_SHA = os.environ.get('GITHUB_SHA', 'unknown')
        ACTOR = os.environ.get('GITHUB_ACTOR', 'unknown')
        
        # Pastas e arquivos a ignorar
        IGNORE_DIRS = {'.git', '__pycache__', 'node_modules', '.github', '.obsidian'}
        IGNORE_FILES = {'.DS_Store', 'Thumbs.db', 'desktop.ini'}
        IGNORE_EXTENSIONS = {'.pyc', '.pyo', '.tmp', '.log'}
        
        print("🚀 Iniciando sincronização com Google Drive")
        print(f"📁 Repositório: {REPO_NAME}")
        print(f"🌿 Branch: {BRANCH}")
        print(f"📝 Commit: {COMMIT_SHA[:8]}")
        print("="*60)
        
        # Criar credenciais OAuth2 usando refresh token
        creds = Credentials(
            token=None,
            refresh_token=REFRESH_TOKEN,
            token_uri='https://oauth2.googleapis.com/token',
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET
        )
        
        # Renovar access token
        print("🔑 Renovando access token...")
        creds.refresh(Request())
        print("✅ Token renovado com sucesso!")
        
        # Criar serviço do Google Drive
        service = build('drive', 'v3', credentials=creds)
        
        # Obter informações do usuário
        try:
            about = service.about().get(fields="user").execute()
            user_email = about['user']['emailAddress']
            print(f"👤 Autenticado como: {user_email}")
        except:
            user_email = "unknown"
        
        def find_or_create_folder(parent_id, folder_name):
            """Encontra ou cria uma pasta no Google Drive"""
            # Buscar pasta existente
            query = f"name = '{folder_name}' and '{parent_id}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
            
            try:
                results = service.files().list(
                    q=query,
                    spaces='drive',
                    fields='files(id, name)'
                ).execute()
                
                files = results.get('files', [])
                
                if files:
                    folder_id = files[0]['id']
                    print(f"📂 Pasta encontrada: {folder_name} (ID: {folder_id})")
                    return folder_id
                else:
                    # Criar nova pasta
                    file_metadata = {
                        'name': folder_name,
                        'mimeType': 'application/vnd.google-apps.folder',
                        'parents': [parent_id]
                    }
                    
                    folder = service.files().create(
                        body=file_metadata,
                        fields='id'
                    ).execute()
                    
                    folder_id = folder.get('id')
                    print(f"📂 Pasta criada: {folder_name} (ID: {folder_id})")
                    return folder_id
                    
            except HttpError as error:
                print(f"❌ Erro ao processar pasta {folder_name}: {error}")
                return None
        
        def clean_folder_contents(folder_id):
            """Remove conteúdo antigo da pasta antes de sincronizar"""
            try:
                # Listar todos os arquivos na pasta
                query = f"'{folder_id}' in parents and trashed = false"
                results = service.files().list(
                    q=query,
                    spaces='drive',
                    fields='files(id, name)'
                ).execute()
                
                files = results.get('files', [])
                
                if files:
                    print(f"🧹 Limpando {len(files)} arquivos/pastas antigas...")
                    for file in files:
                        try:
                            service.files().delete(fileId=file['id']).execute()
                            print(f"  ✓ Removido: {file['name']}")
                        except HttpError as e:
                            if e.resp.status == 403:
                                print(f"  ⚠️ Sem permissão para remover: {file['name']}")
                            else:
                                print(f"  ❌ Erro ao remover {file['name']}: {e}")
                
            except HttpError as error:
                print(f"⚠️ Erro ao limpar pasta: {error}")
        
        def upload_file(file_path, parent_id):
            """Faz upload de um arquivo para o Google Drive"""
            file_name = os.path.basename(file_path)
            
            # Detectar tipo MIME
            mime_type = 'application/octet-stream'
            ext = os.path.splitext(file_name)[1].lower()
            
            mime_types = {
                '.txt': 'text/plain',
                '.md': 'text/markdown',
                '.py': 'text/x-python',
                '.js': 'text/javascript',
                '.json': 'application/json',
                '.yml': 'text/yaml',
                '.yaml': 'text/yaml',
                '.html': 'text/html',
                '.css': 'text/css',
                '.pdf': 'application/pdf',
                '.jpg': 'image/jpeg',
                '.jpeg': 'image/jpeg',
                '.png': 'image/png',
                '.gif': 'image/gif',
                '.svg': 'image/svg+xml',
                '.zip': 'application/zip'
            }
            
            if ext in mime_types:
                mime_type = mime_types[ext]
            
            # Verificar se arquivo já existe
            query = f"name = '{file_name}' and '{parent_id}' in parents and trashed = false"
            results = service.files().list(q=query, spaces='drive', fields='files(id)').execute()
            existing_files = results.get('files', [])
            
            try:
                if existing_files:
                    # Atualizar arquivo existente
                    file_id = existing_files[0]['id']
                    media = MediaFileUpload(file_path, mimetype=mime_type, resumable=True)
                    service.files().update(
                        fileId=file_id,
                        media_body=media
                    ).execute()
                    print(f"  📝 Atualizado: {file_name}")
                else:
                    # Criar novo arquivo
                    file_metadata = {
                        'name': file_name,
                        'parents': [parent_id]
                    }
                    media = MediaFileUpload(file_path, mimetype=mime_type, resumable=True)
                    service.files().create(
                        body=file_metadata,
                        media_body=media,
                        fields='id'
                    ).execute()
                    print(f"  ✅ Criado: {file_name}")
                    
            except HttpError as error:
                print(f"  ❌ Erro ao processar {file_name}: {error}")
                return False
            
            return True
        
        def sync_directory(local_path, parent_id, level=0):
            """Sincroniza recursivamente um diretório com o Google Drive"""
            indent = "  " * level
            
            # Listar conteúdo do diretório
            items = sorted(os.listdir(local_path))
            
            # Processar pastas primeiro
            for item in items:
                item_path = os.path.join(local_path, item)
                
                if os.path.isdir(item_path):
                    # Ignorar pastas específicas
                    if item in IGNORE_DIRS:
                        continue
                    
                    print(f"{indent}📁 Processando pasta: {item}/")
                    
                    # Criar ou encontrar pasta no Drive
                    folder_id = find_or_create_folder(parent_id, item)
                    
                    if folder_id:
                        # Sincronizar recursivamente
                        sync_directory(item_path, folder_id, level + 1)
            
            # Processar arquivos
            for item in items:
                item_path = os.path.join(local_path, item)
                
                if os.path.isfile(item_path):
                    # Ignorar arquivos específicos
                    if item in IGNORE_FILES:
                        continue
                    
                    # Ignorar por extensão
                    ext = os.path.splitext(item)[1].lower()
                    if ext in IGNORE_EXTENSIONS:
                        continue
                    
                    # Fazer upload do arquivo
                    upload_file(item_path, parent_id)
        
        # Processo principal de sincronização
        try:
            print("\n🔍 Verificando estrutura de pastas no Google Drive...")
            
            # Encontrar ou criar pasta do repositório
            repo_folder_id = find_or_create_folder(FOLDER_ID, REPO_NAME)
            
            if not repo_folder_id:
                print("❌ Erro ao criar/encontrar pasta do repositório")
                sys.exit(1)
            
            # Limpar conteúdo antigo
            print("\n🧹 Limpando conteúdo antigo...")
            clean_folder_contents(repo_folder_id)
            
            # Criar arquivo de informações da sincronização
            sync_info = """Sincronização Automática - GitHub Actions
        =====================================
        Repositório: %s
        Branch: %s
        Commit: %s
        Autor: %s
        Data: %s
        Conta: %s
        =====================================
        
        Esta pasta é sincronizada automaticamente com o repositório GitHub.
        Alterações feitas diretamente aqui podem ser sobrescritas na próxima sincronização.
        """ % (REPO_NAME, BRANCH, COMMIT_SHA, ACTOR, datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'), user_email)
            
            # Upload do arquivo de info
            media = MediaInMemoryUpload(sync_info.encode('utf-8'), mimetype='text/plain')
            file_metadata = {
                'name': '_SYNC_INFO.txt',
                'parents': [repo_folder_id]
            }
            service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            # Sincronizar arquivos do repositório
            print("\n📤 Sincronizando arquivos...")
            total_uploaded = 0
            
            # Contar arquivos
            for root, dirs, files in os.walk('.'):
                dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]
                for file in files:
                    if file not in IGNORE_FILES:
                        ext = os.path.splitext(file)[1].lower()
                        if ext not in IGNORE_EXTENSIONS:
                            total_uploaded += 1
            
            print(f"📊 Total de arquivos a sincronizar: {total_uploaded}")
            
            # Executar sincronização
            sync_directory('.', repo_folder_id)
            
            # Resumo final
            print("\n" + "="*60)
            print("✅ SINCRONIZAÇÃO CONCLUÍDA COM SUCESSO!")
            print("="*60)
            print(f"📁 Repositório: {REPO_NAME}")
            print(f"🔀 Branch: {BRANCH}")
            print(f"📝 Commit: {COMMIT_SHA[:8]}")
            print(f"📊 Arquivos processados: {total_uploaded}")
            print(f"👤 Conta: {user_email}")
            print(f"⏰ Horário: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
            print(f"🎯 Localização: Sistema_GAD/Repositorios_Github_Gad/{REPO_NAME}")
            print("="*60)
            print("✨ Sincronização automática usando conta institucional!")
            
        except HttpError as error:
            print(f"\n❌ Erro durante sincronização: {error}")
            sys.exit(1)
        except Exception as e:
            print(f"\n❌ Erro inesperado: {str(e)}")
            sys.exit(1)
        
        SCRIPT_END
        
        # Executar o script
        python sync_drive.py
