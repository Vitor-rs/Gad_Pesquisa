name: Github2GDrive Sincronizer

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sync-to-drive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Github2GDrive
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2 requests
        
        python << 'EOF'
        import os
        import sys
        import json
        import requests
        from datetime import datetime
        from pathlib import Path
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        from google.oauth2.credentials import Credentials
        
        print("🔍 Verificando credenciais OAuth2...")
        print("=" * 60)
        
        # Configurações do repositório
        repo_name = '${{ github.event.repository.name }}'
        branch = '${{ github.ref_name }}'
        commit_sha = '${{ github.sha }}'
        folder_id = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
        
        # Credenciais OAuth2
        client_id = '${{ secrets.GOOGLE_CLIENT_ID }}'
        client_secret = '${{ secrets.GOOGLE_CLIENT_SECRET }}'
        refresh_token = '${{ secrets.GOOGLE_REFRESH_TOKEN }}'
        
        # Verificar se todas as credenciais estão presentes
        missing_secrets = []
        if not client_id: missing_secrets.append('GOOGLE_CLIENT_ID')
        if not client_secret: missing_secrets.append('GOOGLE_CLIENT_SECRET')
        if not refresh_token: missing_secrets.append('GOOGLE_REFRESH_TOKEN')
        if not folder_id: missing_secrets.append('GOOGLE_DRIVE_FOLDER_ID')
        
        if missing_secrets:
            print(f"❌ ERRO: Secrets não configurados: {', '.join(missing_secrets)}")
            sys.exit(1)
        
        print("✅ Todas as credenciais encontradas!")
        print(f"📍 Repositório: {repo_name}")
        print(f"🔀 Branch: {branch}")
        print(f"📝 Commit: {commit_sha[:8]}")
        
        # Renovar access token usando refresh token
        print("\n🔄 Renovando access token...")
        
        token_url = "https://oauth2.googleapis.com/token"
        token_data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'refresh_token': refresh_token,
            'grant_type': 'refresh_token'
        }
        
        response = requests.post(token_url, data=token_data)
        
        if response.status_code != 200:
            print(f"❌ Erro ao renovar token: {response.text}")
            sys.exit(1)
        
        token_info = response.json()
        access_token = token_info['access_token']
        
        print("✅ Token renovado com sucesso!")
        
        # Criar credenciais para Google Drive API
        credentials = Credentials(
            token=access_token,
            refresh_token=refresh_token,
            token_uri="https://oauth2.googleapis.com/token",
            client_id=client_id,
            client_secret=client_secret,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        # Conectar ao Google Drive
        service = build('drive', 'v3', credentials=credentials)
        
        # Testar conexão
        try:
            about = service.about().get(fields='user').execute()
            user_email = about.get('user', {}).get('emailAddress', 'Desconhecido')
            print(f"✅ Conectado como: {user_email}")
        except Exception as e:
            print(f"❌ Erro na conexão: {e}")
            sys.exit(1)
        
        # Verificar pasta de destino
        try:
            folder_info = service.files().get(fileId=folder_id).execute()
            print(f"📁 Pasta encontrada: {folder_info.get('name')}")
        except Exception as e:
            print(f"❌ Pasta não encontrada: {e}")
            sys.exit(1)
        
        # Função para upload recursivo
        def upload_directory(local_path, parent_id, path_prefix=""):
            uploaded_count = 0
            
            for item in sorted(os.listdir(local_path)):
                # Ignorar arquivos/pastas indesejados
                if item in ['.git', '__pycache__', 'node_modules', '.github']:
                    continue
                if item.startswith('.') and item not in ['.gitignore', '.env.example']:
                    continue
                
                item_path = os.path.join(local_path, item)
                drive_path = os.path.join(path_prefix, item) if path_prefix else item
                
                if os.path.isdir(item_path):
                    print(f"📂 Processando pasta: {drive_path}")
                    
                    # Verificar se pasta já existe
                    query = f"name='{item}' and '{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
                    results = service.files().list(q=query, fields='files(id, name)').execute()
                    existing_folders = results.get('files', [])
                    
                    if existing_folders:
                        folder_id = existing_folders[0]['id']
                        print(f"  ♻️  Pasta já existe, usando: {folder_id}")
                    else:
                        # Criar nova pasta
                        folder_metadata = {
                            'name': item,
                            'mimeType': 'application/vnd.google-apps.folder',
                            'parents': [parent_id]
                        }
                        folder = service.files().create(body=folder_metadata, fields='id').execute()
                        folder_id = folder.get('id')
                        print(f"  ✅ Pasta criada: {folder_id}")
                    
                    # Recursivamente fazer upload do conteúdo
                    uploaded_count += upload_directory(item_path, folder_id, drive_path)
                    
                else:
                    # Arquivo regular
                    file_size = os.path.getsize(item_path)
                    print(f"📄 Arquivo: {drive_path} ({file_size:,} bytes)")
                    
                    # Verificar se arquivo já existe
                    query = f"name='{item}' and '{parent_id}' in parents and trashed=false"
                    results = service.files().list(q=query, fields='files(id, name)').execute()
                    existing_files = results.get('files', [])
                    
                    try:
                        if existing_files:
                            # Atualizar arquivo existente
                            file_id = existing_files[0]['id']
                            media = MediaFileUpload(item_path, resumable=True)
                            service.files().update(fileId=file_id, media_body=media).execute()
                            print(f"  ♻️  Atualizado")
                        else:
                            # Criar novo arquivo
                            file_metadata = {
                                'name': item,
                                'parents': [parent_id]
                            }
                            media = MediaFileUpload(item_path, resumable=True)
                            service.files().create(body=file_metadata, media_body=media, fields='id').execute()
                            print(f"  ✅ Enviado")
                        
                        uploaded_count += 1
                    except Exception as e:
                        print(f"  ❌ Erro: {e}")
            
            return uploaded_count
        
        # Verificar se pasta do repositório já existe
        print(f"\n🔍 Verificando pasta do repositório: {repo_name}")
        
        query = f"name='{repo_name}' and '{folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
        results = service.files().list(q=query, fields='files(id, name)').execute()
        repo_folders = results.get('files', [])
        
        if repo_folders:
            repo_folder_id = repo_folders[0]['id']
            print(f"📁 Pasta encontrada: {repo_name} (ID: {repo_folder_id})")
            
            # Limpar conteúdo existente
            print("🧹 Limpando conteúdo anterior...")
            query = f"'{repo_folder_id}' in parents and trashed=false"
            results = service.files().list(q=query, fields='files(id, name)').execute()
            files_to_delete = results.get('files', [])
            
            for file in files_to_delete:
                try:
                    service.files().delete(fileId=file['id']).execute()
                    print(f"  🗑️  Removido: {file['name']}")
                except:
                    pass
        else:
            # Criar nova pasta
            print(f"📁 Criando pasta: {repo_name}")
            
            folder_metadata = {
                'name': repo_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [folder_id]
            }
            
            folder = service.files().create(
                body=folder_metadata,
                fields='id'
            ).execute()
            
            repo_folder_id = folder.get('id')
        
        # Criar arquivo de informações da sincronização
        sync_info = "Sincronização automática via GitHub Actions\n\n"
        sync_info += f"Repositório: {repo_name}\n"
        sync_info += f"Branch: {branch}\n"
        sync_info += f"Commit: {commit_sha}\n"
        sync_info += f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
        sync_info += f"Conta: {user_email}\n"
        
        with open('_SYNC_INFO.txt', 'w', encoding='utf-8') as f:
            f.write(sync_info)
        
        # Fazer upload de todos os arquivos
        print("\n📤 Sincronizando arquivos...")
        total_uploaded = upload_directory('.', repo_folder_id)
        
        print(f"\n🎉 Sincronização concluída com sucesso!")
        print("=" * 50)
        print(f"📁 Repositório: {repo_name}")
        print(f"🔀 Branch: {branch}")
        print(f"📝 Commit: {commit_sha[:8]}")
        print(f"📊 Arquivos processados: {total_uploaded}")
        print(f"👤 Conta: {user_email}")
        print(f"⏰ Horário: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
        print("=" * 50)
        print("✨ Sincronização usando conta institucional concluída!")
        
        EOF
