name: Sync Repository to Google Drive (OAuth2)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  sync-to-drive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necess√°rio para obter hist√≥rico completo do git
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Sync to Google Drive
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2 requests
        
        python << 'EOF'
        import os
        import sys
        import json
        import requests
        import subprocess
        from datetime import datetime
        from pathlib import Path
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
        from google.oauth2.credentials import Credentials
        import io
        
        print("üîç Verificando credenciais OAuth2...")
        print("=" * 60)
        
        # Configura√ß√µes do reposit√≥rio
        repo_name = '${{ github.event.repository.name }}'
        branch = '${{ github.ref_name }}'
        commit_sha = '${{ github.sha }}'
        folder_id = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
        
        # Credenciais OAuth2
        client_id = '${{ secrets.GOOGLE_CLIENT_ID }}'
        client_secret = '${{ secrets.GOOGLE_CLIENT_SECRET }}'
        refresh_token = '${{ secrets.GOOGLE_REFRESH_TOKEN }}'
        
        # Verificar se todas as credenciais est√£o presentes
        missing_secrets = []
        if not client_id: missing_secrets.append('GOOGLE_CLIENT_ID')
        if not client_secret: missing_secrets.append('GOOGLE_CLIENT_SECRET')
        if not refresh_token: missing_secrets.append('GOOGLE_REFRESH_TOKEN')
        if not folder_id: missing_secrets.append('GOOGLE_DRIVE_FOLDER_ID')
        
        if missing_secrets:
            print(f"‚ùå ERRO: Secrets n√£o configurados: {', '.join(missing_secrets)}")
            sys.exit(1)
        
        print("‚úÖ Todas as credenciais encontradas!")
        print(f"üìç Reposit√≥rio: {repo_name}")
        print(f"üîÄ Branch: {branch}")
        print(f"üìù Commit: {commit_sha[:8]}")
        
        # Obter informa√ß√µes do commit usando git
        try:
            # Mensagem do commit
            commit_message = subprocess.check_output(
                ['git', 'log', '-1', '--pretty=%B', commit_sha],
                text=True
            ).strip()
            
            # Autor do commit
            commit_author = subprocess.check_output(
                ['git', 'log', '-1', '--pretty=%an <%ae>', commit_sha],
                text=True
            ).strip()
            
            # Data do commit
            commit_date = subprocess.check_output(
                ['git', 'log', '-1', '--pretty=%ai', commit_sha],
                text=True
            ).strip()
            
            # Arquivos modificados no commit
            changed_files = subprocess.check_output(
                ['git', 'diff-tree', '--no-commit-id', '--name-status', '-r', commit_sha],
                text=True
            ).strip().split('\n')
            
            # Processar lista de arquivos modificados
            files_info = []
            for file_line in changed_files:
                if file_line:
                    parts = file_line.split('\t')
                    if len(parts) >= 2:
                        status = parts[0]
                        filename = parts[1]
                        status_emoji = {
                            'A': '‚ûï',  # Adicionado
                            'M': 'üìù',  # Modificado
                            'D': '‚ùå',  # Deletado
                            'R': 'üîÑ',  # Renomeado
                            'C': 'üìã'   # Copiado
                        }.get(status[0], '‚ùì')
                        files_info.append(f"{status_emoji} {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso ao obter informa√ß√µes do git: {e}")
            commit_message = "Mensagem n√£o dispon√≠vel"
            commit_author = "Autor desconhecido"
            commit_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            files_info = ["Informa√ß√µes de arquivos n√£o dispon√≠veis"]
        
        # Renovar access token usando refresh token
        print("\nüîÑ Renovando access token...")
        
        token_url = "https://oauth2.googleapis.com/token"
        token_data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'refresh_token': refresh_token,
            'grant_type': 'refresh_token'
        }
        
        response = requests.post(token_url, data=token_data)
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao renovar token: {response.text}")
            sys.exit(1)
        
        token_info = response.json()
        access_token = token_info['access_token']
        
        print("‚úÖ Token renovado com sucesso!")
        
        # Criar credenciais para Google Drive API
        credentials = Credentials(
            token=access_token,
            refresh_token=refresh_token,
            token_uri="https://oauth2.googleapis.com/token",
            client_id=client_id,
            client_secret=client_secret,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        # Conectar ao Google Drive
        service = build('drive', 'v3', credentials=credentials)
        
        # Testar conex√£o
        try:
            about = service.about().get(fields='user').execute()
            user_email = about.get('user', {}).get('emailAddress', 'Desconhecido')
            print(f"‚úÖ Conectado como: {user_email}")
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            sys.exit(1)
        
        # Verificar pasta de destino
        try:
            folder_info = service.files().get(fileId=folder_id).execute()
            print(f"üìÅ Pasta encontrada: {folder_info.get('name')}")
        except Exception as e:
            print(f"‚ùå Pasta n√£o encontrada: {e}")
            sys.exit(1)
        
        # Fun√ß√£o para upload recursivo
        def upload_directory(local_path, parent_id, path_prefix=""):
            uploaded_count = 0
            
            for item in sorted(os.listdir(local_path)):
                # Ignorar arquivos/pastas indesejados
                if item in ['.git', '__pycache__', 'node_modules', '.github']:
                    continue
                if item.startswith('.') and item not in ['.gitignore', '.env.example']:
                    continue
                
                item_path = os.path.join(local_path, item)
                drive_path = os.path.join(path_prefix, item) if path_prefix else item
                
                if os.path.isdir(item_path):
                    print(f"üìÇ Processando pasta: {drive_path}")
                    
                    # Verificar se pasta j√° existe
                    query = f"name='{item}' and '{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
                    results = service.files().list(q=query, fields='files(id, name)').execute()
                    existing_folders = results.get('files', [])
                    
                    if existing_folders:
                        folder_id = existing_folders[0]['id']
                        print(f"  ‚ôªÔ∏è  Pasta j√° existe, usando: {folder_id}")
                    else:
                        # Criar nova pasta
                        folder_metadata = {
                            'name': item,
                            'mimeType': 'application/vnd.google-apps.folder',
                            'parents': [parent_id]
                        }
                        folder = service.files().create(body=folder_metadata, fields='id').execute()
                        folder_id = folder.get('id')
                        print(f"  ‚úÖ Pasta criada: {folder_id}")
                    
                    # Recursivamente fazer upload do conte√∫do
                    uploaded_count += upload_directory(item_path, folder_id, drive_path)
                    
                else:
                    # Arquivo regular
                    file_size = os.path.getsize(item_path)
                    print(f"üìÑ Arquivo: {drive_path} ({file_size:,} bytes)")
                    
                    # Verificar se arquivo j√° existe
                    query = f"name='{item}' and '{parent_id}' in parents and trashed=false"
                    results = service.files().list(q=query, fields='files(id, name)').execute()
                    existing_files = results.get('files', [])
                    
                    try:
                        if existing_files:
                            # Atualizar arquivo existente
                            file_id = existing_files[0]['id']
                            media = MediaFileUpload(item_path, resumable=True)
                            service.files().update(fileId=file_id, media_body=media).execute()
                            print(f"  ‚ôªÔ∏è  Atualizado")
                        else:
                            # Criar novo arquivo
                            file_metadata = {
                                'name': item,
                                'parents': [parent_id]
                            }
                            media = MediaFileUpload(item_path, resumable=True)
                            service.files().create(body=file_metadata, media_body=media, fields='id').execute()
                            print(f"  ‚úÖ Enviado")
                        
                        uploaded_count += 1
                    except Exception as e:
                        print(f"  ‚ùå Erro: {e}")
            
            return uploaded_count
        
        # Verificar se pasta do reposit√≥rio j√° existe
        print(f"\nüîç Verificando pasta do reposit√≥rio: {repo_name}")
        
        query = f"name='{repo_name}' and '{folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
        results = service.files().list(q=query, fields='files(id, name)').execute()
        repo_folders = results.get('files', [])
        
        if repo_folders:
            repo_folder_id = repo_folders[0]['id']
            print(f"üìÅ Pasta encontrada: {repo_name} (ID: {repo_folder_id})")
            
            # Limpar conte√∫do existente (exceto o arquivo de hist√≥rico)
            print("üßπ Limpando conte√∫do anterior...")
            query = f"'{repo_folder_id}' in parents and trashed=false"
            results = service.files().list(q=query, fields='files(id, name)').execute()
            files_to_delete = results.get('files', [])
            
            history_file_id = None
            for file in files_to_delete:
                if file['name'] == '_SYNC_HISTORY.md':
                    history_file_id = file['id']
                    print(f"  üìã Mantendo hist√≥rico: {file['name']}")
                else:
                    try:
                        service.files().delete(fileId=file['id']).execute()
                        print(f"  üóëÔ∏è  Removido: {file['name']}")
                    except:
                        pass
        else:
            # Criar nova pasta
            print(f"üìÅ Criando pasta: {repo_name}")
            
            folder_metadata = {
                'name': repo_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [folder_id]
            }
            
            folder = service.files().create(
                body=folder_metadata,
                fields='id'
            ).execute()
            
            repo_folder_id = folder.get('id')
            history_file_id = None
        
        # Preparar nova entrada do hist√≥rico
        sync_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
        new_entry = f"\n## üìÖ {sync_time}\n\n"
        new_entry += f"**Commit:** `{commit_sha[:8]}` - {commit_message}\n\n"
        new_entry += f"**Autor:** {commit_author}\n\n"
        new_entry += f"**Data do Commit:** {commit_date}\n\n"
        new_entry += f"**Branch:** `{branch}`\n\n"
        new_entry += f"**Conta de Sincroniza√ß√£o:** {user_email}\n\n"
        
        if files_info:
            new_entry += "### üìã Arquivos Modificados:\n\n"
            for file_info in files_info:
                new_entry += f"- {file_info}\n"
        
        new_entry += "\n---\n"
        
        # Buscar hist√≥rico existente ou criar novo
        existing_history = ""
        if history_file_id:
            try:
                # Baixar arquivo existente
                request = service.files().get_media(fileId=history_file_id)
                file_handle = io.BytesIO()
                downloader = MediaIoBaseDownload(file_handle, request)
                done = False
                while not done:
                    status, done = downloader.next_chunk()
                
                file_handle.seek(0)
                existing_history = file_handle.read().decode('utf-8')
                print("üìã Hist√≥rico existente carregado")
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel carregar hist√≥rico existente: {e}")
        
        # Se n√£o existe hist√≥rico, criar cabe√ßalho
        if not existing_history:
            existing_history = "# üîÑ Hist√≥rico de Sincroniza√ß√£o\n\n"
            existing_history += f"Este arquivo mant√©m um registro hist√≥rico de todas as sincroniza√ß√µes do reposit√≥rio **{repo_name}** com o Google Drive.\n\n"
            existing_history += "---\n"
        
        # Adicionar nova entrada ao hist√≥rico
        updated_history = existing_history + new_entry
        
        # Salvar hist√≥rico atualizado
        with open('_SYNC_HISTORY.md', 'w', encoding='utf-8') as f:
            f.write(updated_history)
        
        # Fazer upload de todos os arquivos
        print("\nüì§ Sincronizando arquivos...")
        total_uploaded = upload_directory('.', repo_folder_id)
        
        print(f"\nüéâ Sincroniza√ß√£o conclu√≠da com sucesso!")
        print("=" * 50)
        print(f"üìÅ Reposit√≥rio: {repo_name}")
        print(f"üîÄ Branch: {branch}")
        print(f"üìù Commit: {commit_sha[:8]} - {commit_message}")
        print(f"üìä Arquivos processados: {total_uploaded}")
        print(f"üë§ Conta: {user_email}")
        print(f"‚è∞ Hor√°rio: {sync_time}")
        print("=" * 50)
        print("‚ú® Sincroniza√ß√£o usando conta institucional conclu√≠da!")
        print("üìã Hist√≥rico atualizado em _SYNC_HISTORY.md")
        
        EOF
