name: Test Sync Diagnostic

on:
  workflow_dispatch:

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Initial Check
      run: |
        echo "üîç DIAGN√ìSTICO DE SINCRONIZA√á√ÉO"
        echo "================================"
        echo "Data/Hora: $(date)"
        echo "Runner: ${{ runner.os }} - ${{ runner.arch }}"
        echo "Evento: ${{ github.event_name }}"
        
    - name: Check Secrets Configuration
      run: |
        echo "üìã Verificando Secrets..."
        echo "========================="
        
        # Verificar se os secrets existem (n√£o mostra o valor)
        if [ -z "${{ secrets.GOOGLE_CLIENT_ID }}" ]; then
          echo "‚ùå GOOGLE_CLIENT_ID n√£o configurado!"
        else
          echo "‚úÖ GOOGLE_CLIENT_ID configurado (${#GOOGLE_CLIENT_ID} caracteres)"
        fi
        
        if [ -z "${{ secrets.GOOGLE_CLIENT_SECRET }}" ]; then
          echo "‚ùå GOOGLE_CLIENT_SECRET n√£o configurado!"
        else
          echo "‚úÖ GOOGLE_CLIENT_SECRET configurado"
        fi
        
        if [ -z "${{ secrets.GOOGLE_REFRESH_TOKEN }}" ]; then
          echo "‚ùå GOOGLE_REFRESH_TOKEN n√£o configurado!"
        else
          echo "‚úÖ GOOGLE_REFRESH_TOKEN configurado"
        fi
        
        if [ -z "${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}" ]; then
          echo "‚ùå GOOGLE_DRIVE_FOLDER_ID n√£o configurado!"
        else
          echo "‚úÖ GOOGLE_DRIVE_FOLDER_ID configurado"
        fi
        
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Check Repository Structure
      run: |
        echo "üìÅ Estrutura do Reposit√≥rio:"
        echo "============================"
        echo "Total de arquivos: $(find . -type f | wc -l)"
        echo "Total de pastas: $(find . -type d | wc -l)"
        echo "Tamanho total: $(du -sh . | cut -f1)"
        echo ""
        echo "Pastas principais:"
        ls -la
        echo ""
        if [ -d "Certificados" ]; then
          echo "üìÇ Pasta Certificados encontrada!"
          echo "Arquivos em Certificados: $(find Certificados -type f | wc -l)"
        else
          echo "‚ùå Pasta Certificados n√£o encontrada no reposit√≥rio"
        fi
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test Google Drive Connection
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2 requests
        
        python << 'EOF'
        import os
        import sys
        import json
        import requests
        from googleapiclient.discovery import build
        from google.oauth2.credentials import Credentials
        
        print("\nüîå Testando Conex√£o com Google Drive")
        print("=====================================")
        
        # Verificar vari√°veis
        client_id = '${{ secrets.GOOGLE_CLIENT_ID }}'
        client_secret = '${{ secrets.GOOGLE_CLIENT_SECRET }}'
        refresh_token = '${{ secrets.GOOGLE_REFRESH_TOKEN }}'
        folder_id = '${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}'
        
        if not all([client_id, client_secret, refresh_token, folder_id]):
            print("‚ùå Secrets n√£o configurados corretamente!")
            sys.exit(1)
        
        print("‚úÖ Todos os secrets est√£o presentes")
        
        # Testar renova√ß√£o de token
        print("\nüîÑ Testando renova√ß√£o de token...")
        token_url = "https://oauth2.googleapis.com/token"
        token_data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'refresh_token': refresh_token,
            'grant_type': 'refresh_token'
        }
        
        response = requests.post(token_url, data=token_data)
        print(f"Status da resposta: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao renovar token: {response.text}")
            sys.exit(1)
        
        access_token = response.json().get('access_token')
        if not access_token:
            print("‚ùå Token de acesso n√£o recebido!")
            sys.exit(1)
            
        print("‚úÖ Token renovado com sucesso!")
        
        # Testar conex√£o com Drive
        print("\n‚òÅÔ∏è Testando API do Google Drive...")
        try:
            credentials = Credentials(
                token=access_token,
                refresh_token=refresh_token,
                token_uri="https://oauth2.googleapis.com/token",
                client_id=client_id,
                client_secret=client_secret,
                scopes=['https://www.googleapis.com/auth/drive']
            )
            
            service = build('drive', 'v3', credentials=credentials)
            
            # Verificar informa√ß√µes da conta
            about = service.about().get(fields='user').execute()
            user_email = about.get('user', {}).get('emailAddress', 'Desconhecido')
            print(f"‚úÖ Conectado como: {user_email}")
            
            # Verificar pasta
            print(f"\nüìÅ Verificando pasta ID: {folder_id}")
            try:
                folder_info = service.files().get(fileId=folder_id).execute()
                print(f"‚úÖ Pasta encontrada: {folder_info.get('name')}")
                
                # Verificar pasta do reposit√≥rio
                query = f"name='Gad_Pesquisa' and '{folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
                results = service.files().list(q=query, fields='files(id, name)', pageSize=1).execute()
                
                if results.get('files'):
                    repo_folder_id = results['files'][0]['id']
                    print(f"‚úÖ Pasta do reposit√≥rio encontrada: Gad_Pesquisa (ID: {repo_folder_id})")
                    
                    # Contar arquivos
                    print("\nüìä Analisando conte√∫do...")
                    all_query = f"'{repo_folder_id}' in parents and trashed=false"
                    all_results = service.files().list(
                        q=all_query,
                        fields='files(name, mimeType)',
                        pageSize=1000
                    ).execute()
                    
                    files = all_results.get('files', [])
                    folders = [f for f in files if f['mimeType'] == 'application/vnd.google-apps.folder']
                    regular_files = [f for f in files if f['mimeType'] != 'application/vnd.google-apps.folder']
                    
                    print(f"  üìÅ Subpastas: {len(folders)}")
                    print(f"  üìÑ Arquivos: {len(regular_files)}")
                    
                    # Verificar pasta Certificados
                    cert_folder = next((f for f in folders if f['name'] == 'Certificados'), None)
                    if cert_folder:
                        print(f"\n‚úÖ Pasta 'Certificados' encontrada no Drive!")
                        
                        # Contar arquivos na pasta Certificados
                        cert_query = f"'{cert_folder['id']}' in parents and trashed=false"
                        cert_results = service.files().list(
                            q=cert_query,
                            fields='nextPageToken, files(id)',
                            pageSize=1000
                        ).execute()
                        
                        cert_count = len(cert_results.get('files', []))
                        has_more = cert_results.get('nextPageToken') is not None
                        
                        print(f"  üìÑ Arquivos em Certificados: {cert_count}{'+ (tem mais p√°ginas)' if has_more else ''}")
                    else:
                        print("\n‚ö†Ô∏è Pasta 'Certificados' n√£o encontrada no Drive")
                        print("  Pastas dispon√≠veis:", [f['name'] for f in folders])
                else:
                    print("‚ùå Pasta do reposit√≥rio 'Gad_Pesquisa' n√£o encontrada no Drive")
                    
            except Exception as e:
                print(f"‚ùå Erro ao acessar pasta: {e}")
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o com Drive: {e}")
            import traceback
            traceback.print_exc()
            
        print("\n‚úÖ Teste de conex√£o conclu√≠do!")
        EOF
